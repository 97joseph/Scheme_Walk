The algorithm for merging files is exactly the same as the one we used for merging sentences in the mergesort program of Chapter 15. The only difference is that the items to be sorted come from reading ports instead of from firsting a sentence.

(define (filemerge file1 file2 outfile)
  (let ((p1 (open-input-file file1))
	(p2 (open-input-file file2))
	(outp (open-output-file outfile)))
    (filemerge-helper p1 p2 outp (read-string p1) (read-string p2))
    (close-output-port outp)
    (close-input-port p1)
    (close-input-port p2)
    'done))

(define (filemerge-helper p1 p2 outp line1 line2)
  (cond ((eof-object? line1) (merge-copy line2 p2 outp))
	((eof-object? line2) (merge-copy line1 p1 outp))
	((before? line1 line2)
	 (show line1 outp)
	 (filemerge-helper p1 p2 outp (read-string p1) line2))
	(else (show line2 outp)
	      (filemerge-helper p1 p2 outp line1 (read-string p2)))))

(define (merge-copy line inp outp)
  (if (eof-object? line)
      #f
      (begin (show line outp)
	     (merge-copy (read-string inp) inp outp))))
You might think, comparing filemerge-helper with such earlier examples as print-file-helper and file-map-helper, that it would make more sense for filemerge-helper to take just the three ports as arguments and work like this:

(define (filemerge-helper p1 p2 outp)        ;; wrong
  (let ((line1 (read-string p1))
	(line2 (read-string p2)))
    (cond ((eof-object? line1) (merge-copy p2 outp))
	  ((eof-object? line2) (merge-copy p1 outp))
	  ((before? line1 line2)
	   (show line1 outp)
	   (filemerge-helper p1 p2 outp))
	  (else (show line2 outp)
		(filemerge-helper p1 p2 outp)))))


SUM of the File
;;; Procedure: 
;;;   sum-of-file
;;; Parameters:
;;;   file-name, a string that names a file.
;;; Purpose:
;;;   Sums the values in the given file.
;;; Produces:
;;;   sum, a number.
;;; Preconditions:
;;;   file-name names a file. [Unverified]
;;;   That file contains only numbers. [Unverified]
;;; Postconditions:
;;;   Returns a number.
;;;   That number is the sum of all the numbers in the file.
;;;   Does not affect the file.
(define sum-of-file
  (lambda (file-name)
    (let ([source (open-input-file file-name)])
      (let kernel ([sum-so-far 0])
        (let ([nextval (read source)])
          (cond
            ; Are we at the end of the file?
            ; Then stop and return our running sum.
            [(eof-object? nextval) 
             (close-input-port source) 
             sum-so-far]
            ; Have we just read a number?
            ; If so, add it to the sum of the remaining numbers.
            [(number? nextval) 
             (kernel (+ nextval sum-so-far))]
            ; Hmmm ... not a number.  Skip it.
            [else 
             (kernel sum-so-far)]))))))